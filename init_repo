#!/bin/bash
# Copyright (c) 2012 Michael-Keith Bernard
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Fail fast
set -e

# General directory settings
CURRENT=`pwd`
BUNDLE="$CURRENT/bundle"

DATE=$(date +%d%m%Y)
GIT_REPO="git://github.com/SegFaultAX/vim-dotfiles.git"
GIT_BRANCH="segfaultax-$DATE"
GIT_FETCH_SPEC="+refs/heads/master:refs/heads/$GIT_BRANCH"

function usage() {
  echo "Usage: init_repo"
  echo "  --help - this menu"
  echo "  --update - update project files from maintainer"
  echo "  --create-symlink - create a symlink of vimrc"
  echo "  --clean-branches - remove all segfaultax-* branches"
  echo
  echo "  --skip-all - skip all steps"
  echo "  --skip-snipmate - don't remote snipmate/snippets"
  echo "  --skip-commandt - don't compile Command-T"
  echo "  --skip-submodule - don't load submodules"
  echo
}

function submodule() {
  # Fetch all the submodules if we're in the root directory
  if [ -d $CURRENT/.git ]; then
    echo "Running git-submodule commands..."
    git submodule init
    git submodule update

    git submodule foreach git submodule init
    git submodule foreach git submodule update
  else
    echo "Run this command from the root of the project."
    exit 1
  fi
}

function snipmate() {
  # Remove snipmate/snippets directory
  if [ -d $BUNDLE/snipmate/snippets ]; then
    echo "Removing snipmate/snippets directory..."
    rm -rf $BUNDLE/snipmate/snippets
  fi
}

function commandt() {
  # Build command-t
  if [ -d $BUNDLE/command-t ]; then
    echo "Building Command-T..."
    cd $BUNDLE/command-t
    rake make
    cd $CURRENT
  fi
}

function create_symlink() {
  echo "Creating symlink for vimrc."
  VIMRC=$HOME/.vimrc
  if [ -e "$VIMRC" ]; then
    TIMESTAMP=$(date +%s)
    BACKUP="$VIMRC.old.$TIMESTAMP"

    echo "Backing up old $VIMRC to $BACKUP"
    mv $VIMRC $BACKUP
  fi
  ln -s $CURRENT/vimrc $VIMRC
}

function update_project() {
  echo "Fetching maintainer version to $GIT_BRANCH"
  git fetch $GIT_REPO $GIT_FETCH_SPEC
  echo
  echo "You can now run 'git merge $GIT_BRANCH' from master"
  echo "You may also want to run 'git submodule init && git submodule update'"
  echo "You can remove the branch with 'git branch -D $GIT_BRANCH'"
}

function clean_branches() {
  echo "Cleaning up branches that match refs/heads/segfaultax-*"
  git for-each-ref --format="%(refname:short)" refs/heads/segfaultax-\* | \
    xargs git branch -D
}

echo "Initializing vim-dotfiles, by Michael-Keith Bernard"

# Section configuration
SUBMODULE="yes"
SNIPMATE="yes"
COMMANDT="yes"

for opt in "$@"
do
  case "$opt" in
    --help) 
      usage
      exit
      ;;

    --create-symlink) 
      create_symlink
      exit
      ;;

    --update)
      update_project
      exit
      ;;

    --clean-branches)
      clean_branches
      exit
      ;;

    --skip-submodule) 
      SUBMODULE="no";
      echo "Skipping submodule."
      ;;

    --skip-SNIPMATE) 
      SNIPMATE="no"
      echo "Skipping snipmate."
      ;;

    --skip-commandt) 
      COMMANDT="no" 
      echo "Skipping Command-T."
      ;;

    --skip-all) 
      SUBMODULE="no"
      SNIPMATE="no"
      COMMANDT="no"
      ;;

    *)
      echo "Unknown option $opt"
  esac
done

if [ "$SUBMODULE" = "yes" ]; then submodule; fi
if [ "$SNIPMATE" = "yes" ]; then snipmate; fi
if [ "$COMMANDT" = "yes" ]; then commandt; fi

echo "Finished initializing vim-dotfiles."
echo "Run '$0 --create-symlink' to symlink my vimrc."
